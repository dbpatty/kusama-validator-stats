import { CallFunction, Codec, Constructor, RegistryTypes, Registry, RegistryMetadata } from '../../types';
import { EventData } from '../../primitive/Generic/Event';
export declare class TypeRegistry implements Registry {
    private _classes;
    private _definitions;
    private _metadataCalls;
    private _metadataEvents;
    constructor();
    findMetaCall(callIndex: Uint8Array): CallFunction;
    findMetaEvent(eventIndex: Uint8Array): Constructor<EventData>;
    get<T extends Codec = Codec>(name: string): Constructor<T> | undefined;
    getDefinition(name: string): string | undefined;
    getOrThrow<T extends Codec = Codec>(name: string, msg?: string): Constructor<T>;
    hasClass(name: string): boolean;
    hasDef(name: string): boolean;
    hasType(name: string): boolean;
    register(type: Constructor | RegistryTypes): void;
    register(name: string, type: Constructor): void;
    private registerObject;
    setMetadata(metadata: RegistryMetadata): void;
}
