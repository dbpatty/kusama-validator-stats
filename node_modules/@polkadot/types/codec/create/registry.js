"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypeRegistry = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _fromMetadata = _interopRequireDefault(require("@polkadot/metadata/Decorated/extrinsics/fromMetadata"));

var _util = require("@polkadot/util");

var _Event = require("../../primitive/Generic/Event");

var _createClass = require("./createClass");

var _getTypeClass = require("./getTypeClass");

var _getTypeDef = require("./getTypeDef");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const FN_UNKNOWN = {
  method: 'unknown',
  section: 'unknown'
}; // create event classes from metadata

function decorateEvents(registry, metadata, metadataEvents) {
  // decorate the events
  metadata.asLatest.modules.filter((_ref) => {
    let {
      events
    } = _ref;
    return events.isSome;
  }).forEach((section, sectionIndex) => {
    const sectionName = (0, _util.stringCamelCase)(section.name.toString());
    section.events.unwrap().forEach((meta, methodIndex) => {
      const methodName = meta.name.toString();
      const eventIndex = new Uint8Array([sectionIndex, methodIndex]);
      const typeDef = meta.args.map(arg => (0, _getTypeDef.getTypeDef)(arg.toString()));
      let Types = [];

      try {
        Types = typeDef.map(typeDef => (0, _getTypeClass.getTypeClass)(registry, typeDef));
      } catch (error) {
        console.error(error);
      }

      metadataEvents[eventIndex.toString()] = class extends _Event.EventData {
        constructor(registry, value) {
          super(registry, Types, value, typeDef, meta, sectionName, methodName);
        }

      };
    });
  });
} // create extrinsic mapping from metadata


function decorateExtrinsics(registry, metadata, metadataCalls) {
  const extrinsics = (0, _fromMetadata.default)(registry, metadata); // decorate the extrinsics

  Object.values(extrinsics).forEach(methods => Object.values(methods).forEach(method => {
    metadataCalls[method.callIndex.toString()] = method;
  }));
}

class TypeRegistry {
  constructor() {
    this._classes = new Map();
    this._definitions = new Map();
    this._metadataCalls = {};
    this._metadataEvents = {};

    // we only want to import these on creation, i.e. we want to avoid types
    // weird side-effects from circular references. (Since registry is injected
    // into types, this can  be a real concern now)
    const baseTypes = require('../../index.types');

    const definitions = require('../../interfaces/definitions'); // since these are classes, they are injected first


    this.register(_objectSpread({}, baseTypes)); // since these are definitions, they would only get created when needed

    Object.values(definitions).forEach((_ref2) => {
      let {
        types
      } = _ref2;
      return this.register(types);
    });
  }

  findMetaCall(callIndex) {
    (0, _util.assert)(Object.keys(this._metadataCalls).length > 0, 'Calling registry.findMetaCall before metadata has been attached.');
    return this._metadataCalls[callIndex.toString()] || FN_UNKNOWN;
  }

  findMetaEvent(eventIndex) {
    (0, _util.assert)(Object.keys(this._metadataEvents).length > 0, 'Calling registry.findMetaEvent before metadata has been attached.');

    const Event = this._metadataEvents[eventIndex.toString()];

    (0, _util.assert)(!(0, _util.isUndefined)(Event), "Unable to find Event with index ".concat((0, _util.u8aToHex)(eventIndex)));
    return Event;
  }

  get(name) {
    let Type = this._classes.get(name); // we have not already created the type, attempt it


    if (!Type) {
      const definition = this._definitions.get(name); // we have a definition, so create the class now (lazily)


      if (definition) {
        const BaseType = (0, _createClass.createClass)(this, definition); // NOTE If we didn't extend here, we would have strange artifacts. An example is
        // Balance, with this, new Balance() instanceof u128 is true, but Balance !== u128
        // Additionally, we now pass through the registry, which is a link to ourselves

        Type = class extends BaseType {};

        this._classes.set(name, Type);
      }
    }

    return Type;
  }

  getDefinition(name) {
    return this._definitions.get(name);
  }

  getOrThrow(name, msg) {
    const type = this.get(name);

    if ((0, _util.isUndefined)(type)) {
      throw new Error(msg || "type ".concat(name, " not found"));
    }

    return type;
  }

  hasClass(name) {
    return this._classes.has(name);
  }

  hasDef(name) {
    return this._definitions.has(name);
  }

  hasType(name) {
    return this.hasClass(name) || this.hasDef(name);
  }

  // eslint-disable-next-line no-dupe-class-members
  register(arg1, arg2) {
    // NOTE Constructors appear as functions here
    if ((0, _util.isFunction)(arg1)) {
      this._classes.set(arg1.name, arg1);
    } else if ((0, _util.isString)(arg1)) {
      (0, _util.assert)((0, _util.isFunction)(arg2), "Expected class definition passed to '".concat(arg1, "' registration"));

      this._classes.set(arg1, arg2);
    } else {
      this.registerObject(arg1);
    }
  }

  registerObject(obj) {
    Object.entries(obj).forEach((_ref3) => {
      let [name, type] = _ref3;

      if ((0, _util.isFunction)(type)) {
        // This _looks_ a bit funny, but `typeof Clazz === 'function'
        this._classes.set(name, type);
      } else {
        const def = (0, _util.isString)(type) ? type : JSON.stringify(type); // we already have this type, remove the classes registered for it

        if (this._classes.has(name)) {
          this._classes.delete(name);
        }

        this._definitions.set(name, def);
      }
    });
  } // sets the metadata


  setMetadata(metadata) {
    decorateExtrinsics(this, metadata, this._metadataCalls);
    decorateEvents(this, metadata, this._metadataEvents);
  }

}

exports.TypeRegistry = TypeRegistry;